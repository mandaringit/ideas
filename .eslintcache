[{"/Users/kimhyeokjun/Workspace/Practice/ideas/src/index.tsx":"1","/Users/kimhyeokjun/Workspace/Practice/ideas/src/App.tsx":"2","/Users/kimhyeokjun/Workspace/Practice/ideas/src/components/Home.tsx":"3","/Users/kimhyeokjun/Workspace/Practice/ideas/src/components/Navbar.tsx":"4","/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/Bin2Dec/Bin2Dec.tsx":"5","/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/BorderRadiusPreviewer/BorderRadiusPreviewer.tsx":"6","/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/BorderRadiusPreviewer/BorderRadiusPreviewerPercent.tsx":"7","/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/Calculator/Calculator.tsx":"8","/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/ChristmasLights/ChristmasLights.tsx":"9","/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/CauseEffect/CauseEffect.tsx":"10"},{"size":197,"mtime":1607944644419,"results":"11","hashOfConfig":"12"},{"size":1128,"mtime":1607944060147,"results":"13","hashOfConfig":"12"},{"size":100,"mtime":1606832384250,"results":"14","hashOfConfig":"12"},{"size":1285,"mtime":1607944513006,"results":"15","hashOfConfig":"12"},{"size":1079,"mtime":1606832213721,"results":"16","hashOfConfig":"12"},{"size":3311,"mtime":1607040287384,"results":"17","hashOfConfig":"12"},{"size":1357,"mtime":1606956765832,"results":"18","hashOfConfig":"12"},{"size":3950,"mtime":1607040153655,"results":"19","hashOfConfig":"12"},{"size":1582,"mtime":1607046776760,"results":"20","hashOfConfig":"12"},{"size":2577,"mtime":1607510496772,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vgrg9",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/kimhyeokjun/Workspace/Practice/ideas/src/index.tsx",[],"/Users/kimhyeokjun/Workspace/Practice/ideas/src/App.tsx",[],"/Users/kimhyeokjun/Workspace/Practice/ideas/src/components/Home.tsx",[],["44","45"],"/Users/kimhyeokjun/Workspace/Practice/ideas/src/components/Navbar.tsx",[],"/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/Bin2Dec/Bin2Dec.tsx",[],"/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/BorderRadiusPreviewer/BorderRadiusPreviewer.tsx",[],"/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/BorderRadiusPreviewer/BorderRadiusPreviewerPercent.tsx",["46"],"/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/Calculator/Calculator.tsx",["47"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Caculator = () => {\n  const [calcStack, setCalcStack] = useState<[number, string][]>([]);\n  const [displayNumber, setdisplayNumber] = useState<number>(0);\n\n  const clearNumber = () => setdisplayNumber(0);\n  const changeSign = () => setdisplayNumber(-displayNumber);\n  const changePercentage = () => setdisplayNumber(displayNumber / 100);\n  const addNumber = (clickNumber: number) => {\n    if (displayNumber <= 99999999) {\n      setdisplayNumber(displayNumber * 10 + clickNumber);\n    }\n  };\n\n  const addOperator = (operator: \"+\" | \"-\" | \"/\" | \"x\" | \"=\") => {\n    setCalcStack((prev) => [...prev, [displayNumber, operator]]);\n  };\n\n  const calculate = (): number => {\n    if (calcStack.length === 0) return 0;\n\n    let calcNumber = 0;\n    for (const stack of calcStack) {\n      const [number, operator] = stack;\n      if (operator === \"+\") {\n        calcNumber += number;\n      } else if (operator === \"-\") {\n        calcNumber -= number;\n      } else if (operator === \"x\") {\n        calcNumber *= number;\n      } else if (operator === \"/\") {\n        calcNumber /= number;\n      }\n    }\n    return calcNumber;\n  };\n\n  const numberButtons = (numbers: number[]) =>\n    numbers.map((num) => (\n      <button className='button__number' onClick={() => addNumber(num)}>\n        {num}\n      </button>\n    ));\n\n  return (\n    <Container>\n      <div className='display'>\n        <span className='display__number'>\n          {displayNumber > 99999999 ? \"ERR\" : displayNumber}\n        </span>\n      </div>\n      <div className='button__container'>\n        <button className='button__feature' onClick={clearNumber}>\n          AC\n        </button>\n        <button className='button__feature' onClick={changeSign}>\n          +/-\n        </button>\n        <button className='button__feature' onClick={changePercentage}>\n          %\n        </button>\n        <button className='button__operator' onClick={() => addOperator(\"/\")}>\n          รท\n        </button>\n        {numberButtons([7, 8, 9])}\n        <button className='button__operator' onClick={() => addOperator(\"x\")}>\n          x\n        </button>\n        {numberButtons([4, 5, 6])}\n        <button className='button__operator' onClick={() => addOperator(\"-\")}>\n          -\n        </button>\n        {numberButtons([1, 2, 3])}\n        <button className='button__operator' onClick={() => addOperator(\"+\")}>\n          +\n        </button>\n        <button\n          className='button__number button__zero'\n          onClick={() => addNumber(0)}\n        >\n          0\n        </button>\n        <button className='button__number'>.</button>\n        <button className='button__operator' onClick={() => addOperator(\"=\")}>\n          =\n        </button>\n      </div>\n    </Container>\n  );\n};\n\nexport default Caculator;\n\nconst Container = styled.div`\n  max-width: 300px;\n  margin: 0 auto;\n  display: grid;\n  grid-template-rows: auto auto;\n  gap: 1px;\n\n  .display {\n    background-color: black;\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n    padding: 1rem 0.3rem 0.3rem 0.3rem;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n  }\n\n  .display__number {\n    color: white;\n    font-size: 3rem;\n  }\n\n  button {\n    background-color: transparent;\n    color: white;\n    font-weight: 500;\n    font-size: 1.5rem;\n    border: none;\n    cursor: pointer;\n    transition-duration: 0.3s;\n    border-radius: 3px;\n  }\n\n  button:focus {\n    outline: none;\n  }\n\n  button:hover {\n    opacity: 0.7;\n  }\n\n  .button__container {\n    display: grid;\n    gap: 1px;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(5, 50px);\n  }\n\n  .button__feature {\n    background-color: #616161;\n  }\n  .button__number {\n    background-color: #9e9e9e;\n  }\n\n  .button__operator {\n    background-color: #ffa000;\n  }\n\n  .button__zero {\n    grid-column-start: 1;\n    grid-column-end: span 2;\n  }\n`;\n","/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/ChristmasLights/ChristmasLights.tsx",[],"/Users/kimhyeokjun/Workspace/Practice/ideas/src/features/CauseEffect/CauseEffect.tsx",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":5,"column":18,"nodeType":"54","messageId":"55","endLine":5,"endColumn":27},{"ruleId":"52","severity":1,"message":"56","line":21,"column":9,"nodeType":"54","messageId":"55","endLine":21,"endColumn":18},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"@typescript-eslint/no-unused-vars","'setRadius' is assigned a value but never used.","Identifier","unusedVar","'calculate' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]